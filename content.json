[{"title":"git和svn","date":"2017-01-09T00:53:58.532Z","path":"2017/01/09/git和svn/","text":"svn特点: 简单，只是需要一个放代码的地方Git特点: 版本控制可以不依赖网络做任何事，对分支和合并有更好的支持。两者区别:1. git是分布式的，而svn不是。这是git和其他非分布式的版本控制系统（svn，cvs等）最核心的区别。Git并不是目前唯一的分布式版本控制系统，如Bitkeeper, Mercurial等，也是运行在分布式模式上的。但git在在这方面做的更好，而且还拥有更多强大的功能特征。Git和SVN一样拥有自己的集中式版本库或服务器。只是git更倾向于分布式模式，即每个开发人员从中心版本库/服务端上chect out代码后会在自己的电脑上克隆一个自己的版本库。可以在没有网络的情况下，commit文件，查看历史版本记录，创建项目分支等。 2. git 把内容按元数据方式存储，而svn是按文件。所有的资源控制系统都是把文件的元信息隐藏在一个类似SVN等的文件夹中。Git目录的体积大小和SVN差距很大。因为Git目录是处于你的电脑上的一个克隆的版本库，他拥有中心版本库上的所有东西（标签，分支，版本记录等）。 3. git没有一个全局版本号，而svn有。这是目前为止git相比SVN缺少最大的一个特征。4. git 的内容的完整性要优于svn。GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏 5. git下载下来后，在OffLine状态下可以看到所有的Log, svn不可以。6. 刚开始用时SVN必须先Update才能Commit,忘记了合并时就会出现一些错误，git还是比较少的出现这种情况。7. 克隆一份全新的目录以同样拥有五个分支来说，SVN是同时复制5个版本的文件,也就是说重复五次同样的动作。而Git只是获取文件的每个版本的元素，然后只载入主要的分支(master)。8. SVN只能有一个指定中央版本库。当这个中央版本库有问题时，所有工作成员都一起瘫痪直到版本库维修完毕或者新的版本库设立完成。而 Git可以有无限个版本库。更正确的说法，每一个Git都是一个版本库，区别是它们是否拥有活跃目录（Git Working Tree）。9. 在SVN中分支是一个完整的目录。且这个目录拥有完整的实际文件。而 Git，每个工作成员可以任意在自己的本地版本库开啟无限个分支。10. 对于SVN，当你提交你的作品时，它会直接记录到中央版本库。当你发现你的作品存在问题时，你已经无法阻止。如果网路中断，则根本没办法提交！而git的提交完全属于本地版本库的活动。而你只需git push（推）到主要版本库即可。即“同步”（Sync）。 CaoLinlin","tags":[]},{"title":"git和github以及如何搭建自己的博客","date":"2017-01-07T05:35:08.828Z","path":"2017/01/07/git/","text":"一. GIT1. 什么是git Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。与常用的版本控制工具 CVS、Subversion等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 2. 源码是什么？ 在一个项目中，凡是由开发人员编写的代码都算是源代码。 3. 源代码为什么要管理起来？ 让代码可以被追溯，主要记录每次变更了什么，谁主导了这次的变化。协同开发，人为的维护比较麻烦。 4. git是谁做的？ -Git是linux之父（Linus Torvalds, 被誉为“活着的传奇”）为了维护管理Linux源码写的一个工具。 git之前很多使用svn, vss, tfs, hs….. git安装 安装相关的git客户端（命令行的） 安装界面化的git客户端SourceTress(tortoisegit, smartgit) 这里将只介绍命令行的安装 输入 git 检查是否已经安装过 git 在github官网下载正确的版本，一路安装即可。 然后以管理员身份打开cmd，git –servsion 检查git是否安装成功 git 命令清单Git基本命令包含查看、添加、提交、删除、找回、重置修改文件等等 git的简单使用1. 使用git init 初始化一个本地仓库 在本地文件夹中添加一个.git文件夹， 用于记录项目所有的变更信息。 2. git status 用于查看本地仓库的变更状态。第一次查看会显示未被跟踪的文件。 -s 参数: 输出简要的变更日志。 3. git add . 将没有被跟踪的文件添加到跟踪列表（git add –all） 4. 本地忽略清单 在.gitignore文件中添加相应的忽略清单 如：node modules /min 5. 提交 git commit 将本地的变化提交到本地的仓库文件夹归档 git commit -m “说明” （b必须you提交的日志） 6. git config git config –global user.email”you@example.com” git config –global user.name”your name” 7. git diff 比较当前文件和文件的状态 8. git log git log -p查看当前所有的提交 9. git reset –hard”哈希值” 将代码回归到之前的某个版本 总结 git 不需要服务器，但是协同开发时需要 git服务器，用来同步本地的代码仓库 git 是一个工具，github是一个网站（提供了远程仓库的功能） github网站提供的就是git服务（免费的服务，但是你提交的代码必须是开源的） 二. GitHubgithub 基本介绍[https://github.com] github是一个git服务的提供商（提出社交化编程） 创建用户 在github中创建一个账户，并且创建一个空的远程仓库 远程提交 git remote git remote add origin git@github.com:caocaolin/aaaa.git git push -u origin master git remote rm origin(删除远程仓库信息) 远程拉取 git clone （克隆相关的代码） git pull origin master （拉取最新的代码） 需要注意的是重新推入前要先拉取最新的代码 GitHub 页面的其他的功能gist 保留代码片段 git分支 git branch 查看分支 git branch ”分支名称“ 添加分支 git chexkout v2 切换到相应的分支 git push -u origin v2 推入到该分支 托管页面 分支名必须是 gh-pages hexo工具1. 使用npm安装hexo npm install -g hexo2. 初始化hexo hexo init blog3. 生成静态页面 hexo generate 4. 启动本地服务，进行文件预览调试 hexo server5. 修改 blog文件夹里面的 _config.yml文件 deploy: type: git repository: git@github.com:caocaolin/my_blog.git branch: gh-pages 6. 下载安装hexo-deployer-git npm install hexo-deployer-git –save7. 发布到github上 hexo deploy –generate**注意** : 打开网站会出现乱掉的情况，由于需要配置相应的路径 修改_config.yml文件 root:/ 重新发布 hexo clean hexo d g 关于yilia主题的使用怎样更换yilia主题头像 首先找到 G:\\my_blog\\blog\\themes\\yilia\\source\\img 把你要替换的头像放到该文件夹下，再找到 G:\\my_blog\\blog\\themes\\yilia _config.yml修改头像路径然后再在G:\\my_blog\\blog\\themes\\yilia&gt; \\layout_partial下面的 left-col.ejs, 用编辑器打开对如下进行编辑，再上传即可 把&lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot; class=&quot;js-avatar show&quot;&gt;改为&lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot; class=&quot;js-avatar show&quot; style=&quot;width: 100%;height: 100%;opacity: 1;&quot;&gt; 怎样切换yilia左侧头部背景 G:\\my_blog\\blog\\themes\\yilia\\layout_partial下面的left-col.ejs 的 &lt;% var defaultBg = ‘#99D9EA’; %&gt;** 模板里面的内容更改需要的颜色 G:\\my_blog\\blog\\themes\\yilia 下的 ——config.yml style: header更改为需要的颜色 重新部署后刷新页面可能需要短时间的等待 关于博客遇到的问题CNAME（域名映射问题）图片问题SSH路径展开全文的404错误每次重新上传都要hexo clean CaoLinlin","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"welcome","date":"2017-01-06T13:00:30.873Z","path":"2017/01/06/demo/","text":"欢迎大家访问我的博客 希望大家多多提意见，共同进步哦！ CaoLinlin","tags":[]}]